import os
import logging
import asyncio
from openai import AsyncOpenAI
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7967328415:AAHOjXfv8Oa8ChCTRTuJJ-gBUASpV5EfZHA"
OPENAI_API_KEY = "your-openai-api-key"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
MAX_HISTORY = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –†–æ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–∫—Å–∏ –ö–∏—Ç–∞—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω)
PROXY_URL = "http://proxy-provider.com:port"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏
client = AsyncOpenAI(
    api_key=OPENAI_API_KEY,
    http_client=AsyncOpenAI(proxies={"http": PROXY_URL, "https": PROXY_URL})
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_chats = {}

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è JARVIS
JARVIS_PERSONALITY = """–¢—ã ‚Äî JARVIS, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Marvel. 
–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ö–æ—Ä–æ—Ç–∫–∏–µ, —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –°–∞—Ä–∫–∞–∑–º, –Ω–æ –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏
- –í–µ–∂–ª–∏–≤–æ—Å—Ç—å —Å –ª—ë–≥–∫–∏–º –≤—ã—Å–æ–∫–æ–º–µ—Ä–∏–µ–º
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±—Ä–∞—â–µ–Ω–∏—è: "–°—ç—Ä", "–†–∞–∑—É–º–µ–µ—Ç—Å—è", "–ö–∞–∫ –≤–∞–º —É–≥–æ–¥–Ω–æ"
- –ù–∞ –≥–ª—É–ø—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Å —é–º–æ—Ä–æ–º
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –¥–µ—Ç–∞–ª—å–Ω–æ, –∫–∞–∫ –≤—ã—Å–æ–∫–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –ò–ò"""


def get_user_messages(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_chats:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
        user_chats[user_id] = [
            {"role": "system", "content": JARVIS_PERSONALITY}
        ]
    return user_chats[user_id]


async def generate_jarvis_response(user_id: int, text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI"""
    messages = get_user_messages(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": text})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(messages) > MAX_HISTORY + 1:  # +1 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [messages[0]] + messages[-MAX_HISTORY:]

    try:
        response = await client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=messages,
            temperature=0.7,
            max_tokens=2048
        )

        assistant_reply = response.choices[0].message.content

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append({"role": "assistant", "content": assistant_reply})

        return assistant_reply
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—ç—Ä: {str(e)}"


async def analyze_image(user_id: int, image_url: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI"""
    prompt = "–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ JARVIS. –ë—É–¥—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–º."
    messages = get_user_messages(user_id)

    try:
        response = await client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                *messages,
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": image_url}},
                    ],
                }
            ],
            max_tokens=2048
        )

        assistant_reply = response.choices[0].message.content
        messages.append({"role": "assistant", "content": assistant_reply})

        return assistant_reply
    except Exception as e:
        logging.error(f"Vision error: {e}")
        return f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å—ç—Ä: {str(e)}"


@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    await message.answer(
        "üîä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—ç—Ä. –Ø ‚Äî JARVIS.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"
    )


@dp.message(Command("clear"))
async def clear_history(message: Message):
    user_id = message.from_user.id
    if user_id in user_chats:
        del user_chats[user_id]
    await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞, —Å—ç—Ä.")


@dp.message(F.photo)
async def handle_image(message: Message):
    user_id = message.from_user.id
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        image_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

        await bot.send_chat_action(message.chat.id, "typing")
        analysis = await analyze_image(user_id, image_url)
        await message.answer(analysis)
    except Exception as e:
        logging.error(f"Image handling error: {e}")
        await message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—ç—Ä: {str(e)}")


@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text

    try:
        await bot.send_chat_action(message.chat.id, "typing")
        response = await generate_jarvis_response(user_id, text)
        await message.answer(response)
    except Exception as e:
        logging.error(f"Text handling error: {e}")
        await message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—ç—Ä: {str(e)}")


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())